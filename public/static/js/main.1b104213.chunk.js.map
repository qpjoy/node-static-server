{"version":3,"sources":["routes.js","components/partial/loading/Loading.js","App.js","serviceWorker.js","index.js"],"names":["routes","path","exact","redirect","component","dynamicWrapper","__webpack_require__","e","then","bind","Promise","all","Loading","react_default","a","createElement","style","display","flex","fontSize","justifyContent","Component","App","index_es","config","loading","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","unregister","navigator","serviceWorker","ready","registration"],"mappings":"kNAiEeA,EA/DA,CACX,CACIC,KAAM,IACNC,OAAO,EACPC,SAAU,eAEd,CACIF,KAAM,QACNG,UAAWC,YAAe,kBAAMC,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,aAChCT,OAAQ,CACJ,CACEC,KAAM,QACNC,OAAO,EACPC,SAAU,QAEZ,CACIF,KAAM,cACNC,OAAO,EACPE,UAAWC,YAAe,kBAAMK,QAAAC,IAAA,CAAAL,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,cAEpC,CACIR,KAAM,kBACNC,OAAO,EACPE,UAAWC,YAAe,kBAAMK,QAAAC,IAAA,CAAAL,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,IAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,cAEpC,CACIR,KAAM,UAENE,SAAU,UAItB,CACIF,KAAM,WACNG,UAAWC,YAAe,kBAAMC,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,aAChCT,OAAQ,CACJ,CACIC,KAAM,iBACNC,OAAO,EACPE,UAAWC,YAAe,kBAAMC,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,cAEpC,CACIR,KAAM,aACNE,SAAU,oBAItB,CACIF,KAAM,UACNC,OAAO,EACPE,UAAWC,YAAe,kBAAMK,QAAAC,IAAA,CAAAL,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,cAOpC,CACIR,KAAM,IACNG,UAAWC,YAAe,kBAAMK,QAAAC,IAAA,CAAAL,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,kDC5CzBG,wNAbP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CACRC,QAAS,OACTC,KAAM,IACNC,SAAU,OACVC,eAAgB,WAJpB,gCAHUC,aCWPC,MANf,SAASA,MACP,OACIT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAaC,OAAQxB,EAAQyB,QAASb,KCGxBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECNNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SDoH1C,SAASC,aACV,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaJ,eClHnBE","file":"static/js/main.1b104213.chunk.js","sourcesContent":["import { dynamicWrapper } from 'react-router-guard';\r\n\r\nconst routes = [\r\n    {\r\n        path: '/',\r\n        exact: true,\r\n        redirect: '/home/games'\r\n    },\r\n    {\r\n        path: '/home',\r\n        component: dynamicWrapper(() => import('components/pages/home')),\r\n        routes: [\r\n            {\r\n              path: '/home',\r\n              exact: true,\r\n              redirect: '/404'\r\n            },\r\n            {\r\n                path: '/home/games',\r\n                exact: true,\r\n                component: dynamicWrapper(() => import('components/pages/home/Home'))\r\n            },\r\n            {\r\n                path: '/home/games/:id',\r\n                exact: true,\r\n                component: dynamicWrapper(() => import('components/pages/home/GameDetail'))\r\n            },\r\n            {\r\n                path: '/home/*',\r\n                // component: dynamicWrapper(() => import('components/pages/'))\r\n                redirect: '/404'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        path: '/landing',\r\n        component: dynamicWrapper(() => import('components/pages/landing')),\r\n        routes: [\r\n            {\r\n                path: '/landing/login',\r\n                exact: true,\r\n                component: dynamicWrapper(() => import('components/pages/landing/Login'))\r\n            },\r\n            {\r\n                path: '/landing/*',\r\n                redirect: '/landing/login'\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        path: '/search',\r\n        exact: true,\r\n        component: dynamicWrapper(() => import('components/pages/search/SearchResult')),\r\n        // routes: [\r\n        //     {\r\n        //         path: '/search/'\r\n        //     }\r\n        // ]\r\n    },\r\n    {\r\n        path: '*',\r\n        component: dynamicWrapper(() => import('components/pages/404/NotFound'))\r\n    }\r\n];\r\n\r\nexport default routes;","import React, { Component } from 'react';\r\n\r\nclass Loading extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{\r\n                display: 'flex',\r\n                flex: '1',\r\n                fontSize: '2rem',\r\n                justifyContent: 'center'\r\n            }}>\r\n                L o a d ing ...\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Loading;","import React from 'react';\nimport { RouterGuard } from 'react-router-guard';\n\n// import logo from './logo.svg';\nimport routes from \"./routes\";\nimport Loading from \"components/partial/loading/Loading\";\n\nfunction App() {\n  return (\n      <RouterGuard config={routes} loading={Loading}></RouterGuard>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"amfe-flexible\";\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport 'assets/css/style.css';\n// import 'assets/sass/main.scss';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}